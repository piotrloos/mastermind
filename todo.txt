# do zrobienia w tym sprincie:

# TODO: poprawa restartu gry na tych samych ustawieniach (bez generowania patternów)
# TODO: new game exhausted generator bug (solver=*, prebuild=0, itertools=1)
# TODO: review my pattern generator, include shuffle settings
# TODO: implementacja opcji: allow_duplicates, allow_blanks
# TODO: stworzenie pliku `readme.md`
# TODO: testy, testy, testy...

# w następnej kolejności:

# TODO: możliwość wyłączenia Progressu
# TODO: formatowanie czasu w minutach, sekundach, milisekundach
# TODO: komunikat o czyszczeniu pamięci na koniec gry
# TODO: refactor podobnych metod w Game/Helper/Solver
# TODO: sys.getsizeof() dla listy patternów
# TODO: typy zmiennych w deklaracjach funkcji (type hints)
# TODO: porządek w nazwach metod i pól (__name)
# TODO: mierzenie czasu myślenia przez człowieka

# polecenia "shella":

# TODO: możliwość wpisywania poleceń:
# TODO: !next: inna propozycja rozwiązania w Helperze
# TODO: !help: pomoc, możliwe polecenia, instrukcja gry
# TODO: !exit: skrót do wyjścia z gry
# TODO: !list: lista możliwych rozwiązań w Helperze (tylko Solver2?)
# TODO: !undo: cofnięcie ostatniego ruchu
# TODO: !pass: opcja poddania się (nowy `_game_status`)
# TODO: !restart: restart gry z tym samym rozwiązaniem
# TODO: !reset: restart gry z nowym rozwiązaniem przy tych samych ustawieniach
# TODO: !shuffle: wymieszanie listy patternów
# TODO: !sort: posortowanie listy patternów
# TODO: !settings: wyświetlenie parametrów gry

# później, pomysły itp.:

# TODO: Solver1 - liczenie liczby możliwych patternów generatora (kopiowanie generatora wraz ze stanem)
# TODO: Solver2 - tworzenie tablicy dwuwymiarowej trójstanowej (must be, can be, can't be) dla każdej pozycji i dla każdego koloru
# TODO: optymalizacja grupowego filtrowania patternów (Solver1 i Solver2)
# TODO: przyjmowanie własnej listy Pegów
# TODO: Solver1 - przyspieszenie generatora:
# TODO:     ocena ważności wyniku i sprawdzanie all() po ważności
# TODO:     szybkie odrzucenie błędnych patternów (przeskok generatora o najbardziej znaczący peg)
# TODO:     wielowątkowość
# TODO: poziom printowania komunikatów
# TODO: rozdzielenie klas `Game` i `Solver` na część ludzką dziedziczoną po części komputerowej
# TODO: możliwość gry komputera samego ze sobą
# TODO: testy czasowe, wielokrotne uruchamianie gry i mierzenie czasu
# TODO: Solver3 - python-constraint
# TODO: Solver4 - mój algorytm rozwiązywania
